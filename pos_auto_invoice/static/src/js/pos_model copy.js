odoo.define('pos_auto_invoice', function (require) {
    var models = require('point_of_sale.models');
    var screens = require('point_of_sale.screens');
    var rpc = require('web.rpc');
    var core = require('web.core');
    var qweb = core.qweb;
    var _super_Order = models.Order.prototype;
    var _t = core._t;

    var _super_PosModel = models.PosModel.prototype;
    models.PosModel = models.PosModel.extend({
        initialize: function (session, attributes) {
            // DESDE ACA
            var journal_model = _.find(this.models, function (model) {
                return model.model === 'pos.payment.method';
            });

            journal_model.fields.push('line_ids');

            /*var factura_model = _.find(this.models, function (model) {
                return model.model === 'account.invoice';
            });

            factura_model.fields.push('afip_auth_code');*/

            _super_PosModel.initialize.apply(this, arguments);

        },

    });

    models.PosModel = models.PosModel.extend({

        get_pos_auto_amount: function (order) {
            var payment_lines = order.get_paymentlines();
            var pos_auto_invoice = false;
            var invoiced_def = new $.Deferred();
            for (var i = 0; i < payment_lines.length; i++) {
                var journal_id = payment_lines[i];
                var payment_method_id = journal_id['payment_method']['id'];
                var pos_config_id = journal_id['pos']['config_id'];
                console.log('journal_id', journal_id);
                console.log('payment_method_id', payment_method_id);
                console.log('pos_config_id', pos_config_id);
                rpc.query({
                     model: 'pos.payment.method.line',
                     method: 'search_read',
                     args: [[['payment_method_id', '=', payment_method_id],
                             ['pos_config_id', '=', pos_config_id]], ['invoice_amount']],
                    }).then(function (company_journal) {
                    console.log('.............');
                    console.log(company_journal[0]['invoice_amount']);
                    invoiced_def.resolve(company_journal[0]['invoice_amount']);
                    })
            }
            return invoiced_def.promise();
        },

        push_and_invoice_order: function (order) {
            console.log('push_and_invoice_order.------------------------');
            order.is_tax_free_order=false;
            var self = this;
            var client = order.get_client()
            var invoiced = new Promise(function (resolveInvoiced, rejectInvoiced) {
                if(!order.get_client()){
                    rejectInvoiced({code:400, message:'Missing Customer', data:{}});
                }
                $.when(self.get_pos_auto_amount(order)
                    ).then(function(pos_auto_invoice) {
                        console.log('pos_auto_invoice222222', pos_auto_invoice);
                        console.log('order.get_total_with_tax()', order.get_total_with_tax());
                        if (order.is_to_invoice() && client && !client.vat && order.get_total_with_tax() > pos_auto_invoice) {

                            console.log('Missing Customer Vat');
                            rejectInvoiced({code:400, message:'Missing Customer Vat', data:{}});
                            //return res;
                        }
                        else{
                            var order_id = self.db.add_order(order.export_as_JSON());
                            self.flush_mutex.exec(function () {
                                var done =  new Promise(function (resolveDone, rejectDone) {
                                    // send the order to the server
                                    // we have a 30 seconds timeout on this push.
                                    // FIXME: if the server takes more than 30 seconds to accept the order,
                                    // the client will believe it wasn't successfully sent, and very bad
                                    // things will happen as a duplicate will be sent next time
                                    // so we must make sure the server detects and ignores duplicated orders

                                    var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});

                                    transfer.catch(function (error) {
                                        rejectInvoiced(error);
                                        rejectDone();
                                    });

                                    // on success, get the order id generated by the server
                                    transfer.then(function(order_server_id){
                                        // generate the pdf and download it
                                        if (order_server_id.length && !order.is_to_email() && order.pos.config.print_pdf_invoice) {
                                            // point_of_sale.pos_invoice_report
                                            // l10n_ar_report_fe.report_fe_invoice_document
                                            console.log('imprmiendoooo');
                                            self.chrome.do_action('l10n_ar_report_fe.report_fe_invoice_document',{additional_context:{
                                                active_ids:order_server_id,
                                            }}).then(function () {
                                                resolveInvoiced(order_server_id);
                                                resolveDone();
                                            }).guardedCatch(function (error) {
                                                rejectInvoiced({code:401, message:'Backend Invoice', data:{order: order}});
                                                rejectDone();
                                            });
                                        } else if (order_server_id.length) {
                                            resolveInvoiced(order_server_id);
                                            resolveDone();
                                        } else {
                                            // The order has been pushed separately in batch when
                                            // the connection came back.
                                            // The user has to go to the backend to print the invoice
                                            rejectInvoiced({code:401, message:'Backend Invoice', data:{order: order}});
                                            rejectDone();
                                        }
                                    });
                                    return done;
                                });
                            });
                        }
                    })


            });

            return invoiced;
        },
    });


    screens.PaymentScreenWidget.include({


        get_pos_auto_invoice: function (order) {
            var self = this;
            var payment_lines = order.get_paymentlines();
            var pos_auto_invoice = false;
            var invoiced_def = new $.Deferred();
            for (var i = 0; i < payment_lines.length; i++) {
                var journal_id = payment_lines[i];
                var payment_method_id = journal_id['payment_method']['id'];
                var pos_config_id = journal_id['pos']['config_id'];
                console.log('journal_id', journal_id);
                console.log('payment_method_id', payment_method_id);
                console.log('pos_config_id', pos_config_id);
                rpc.query({
                     model: 'pos.payment.method.line',
                     method: 'search_read',
                     args: [[['payment_method_id', '=', payment_method_id],
                             ['pos_config_id', '=', pos_config_id]], ['type']],
                    }).then(function (company_journal) {
                    console.log('xxxxxx.............');
                    console.log(company_journal);
                    if (company_journal.length==0) {
                        self.gui.show_popup('error',{
                            'title': "Error: Metodo de pago",
                            'body':  'Falta elegir la modalidad del metodo de pago seleccionado (manual/cta. cte)',
                        });
                        // self.gui.show_popup('error',_t('Falta elegir la modalidad del metodo (manual/cta. cte) de pago seleccionado'));
                        return;
                    }
                    if (company_journal[0]['type']==='cta_cte'){
                        pos_auto_invoice = true;
                        console.log('if....',pos_auto_invoice);
                        //invoiced_def.resolve(pos_auto_invoice);
                    }
                    else{
                        // ojo! no se que puede pasar con esto cuando selecciones más de un método de pago
                        console.log('else....',pos_auto_invoice);
                        //invoiced_def.resolve(pos_auto_invoice);
                    }
                    console.log('-------------', pos_auto_invoice);
                    invoiced_def.resolve(pos_auto_invoice);
                })
            }
            /*if (!pos_auto_invoice){
                console.log('else.... false');
                console.log(pos_auto_invoice);
                invoiced_def.reject();
                return invoiced_def;
            }*/
            return invoiced_def.promise();
        },


        finalize_validation: function() {
            // _super_Order.initialize.apply(this, arguments);
            /*console.log('finalize_validation');
            console.log(this);*/
            var self = this;
            var order = this.pos.get_order();
            /*this._super();*/
            var _super=this._super.bind(this);
            $.when(this.get_pos_auto_invoice(order)
            ).then(function(pos_auto_invoice) {
                //var pos_auto_invoice = this.get_pos_auto_invoice(order);
                console.log('pos_auto_invoicexxxxxxxxxxxx');
                console.log(pos_auto_invoice);


                /*this._super();*/
                if ( pos_auto_invoice ) {
                    self.$('.js_invoice').addClass('highlight');
                    self.to_invoice = true;
                    order.set_to_invoice(true);
                    // var invoiced = self.pos.push_and_invoice_order(order);
                    // self.invoicing = true;
                    // //invoiced.fail(self._handleFailedPushForInvoice.bind(self, order, false));
                    // invoiced.done(function(){
                    //     self.invoicing = false;
                    //     self.gui.show_screen('receipt');
                    // });
                    console.log('self.pos', self.pos);
                    console.log('this.pos', this.pos);
                    var invoiced = self.pos.push_and_invoice_order(order);
                    self.invoicing = true;

                    invoiced.catch(self._handleFailedPushForInvoice.bind(self, order, false));

                    invoiced.then(function (server_ids) {
                        console.log('aaaaaaa', server_ids);
                        self.invoicing = false;
                        var post_push_promise = [];
                        post_push_promise = self.post_push_order_resolve(order, server_ids);
                        post_push_promise.then(function () {
                                self.gui.show_screen('receipt');
                        }).catch(function (error) {
                            self.gui.show_screen('receipt');
                            if (error) {
                                self.gui.show_popup('error',{
                                    'title': "Error: no internet connection",
                                    'body':  error,
                                });
                            }
                        });
                    });
                 }
                 else {
                    console.log('else.....');
                    //self.$('.js_invoice').removeClass('highlight');
                    self.to_invoice = false;
                    console.log('is_tax_free_order trueeee.....');
                    order.is_tax_free_order=true;
                    _super();
                    // self.pos.push_order(order);
                    // self.gui.show_screen('receipt');
                }
            })
            // this._super();
        },
    });

    screens.ScreenWidget.include({
    _handleFailedPushForInvoice: function(order, refresh_screen, error) {
        var self = this;
        order = order || this.pos.get_order();
        this.invoicing = false;
        order.finalized = false;
        if (error.message === 'Missing Customer Vat') {
            this.gui.show_popup('confirm', {
                'title': _t('Complete el CUIT del cliente'),
                'body': _t('Debe completar el CUIT del cliente para poder facturar.'),
                confirm: function(){
                    self.gui.show_screen('clientlist', null, refresh_screen);
                },
            });
        } else {
            return this._super(order, refresh_screen, error);
        }
    },
});

});
